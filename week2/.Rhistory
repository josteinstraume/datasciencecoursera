MyIdentical <- function(x,y){
if(all(!is.na(c(x,y)))){
if(sum(x==y)==length(x)){
return(TRUE)
}else{
return(FALSE)
}
}else if((which(is.na(x))==which(is.na(y)))!=0){
x[which(is.na(x))] <- 0
y[which(is.na(y))] <- 0
if(sum(x==y)==length(x)){
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
MyIdentical(x,y)
MyIdentical <- function(x,y){
if(all(!is.na(c(x,y)))){
if(sum(x==y)==length(x)){
return(TRUE)
}else{
return(FALSE)
}
}else if(length(which(is.na(x))==which(is.na(y)))!=0){
x[which(is.na(x))] <- 0
y[which(is.na(y))] <- 0
if(sum(x==y)==length(x)){
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
MyIdentical(x,y)
x
y
x[1] <- 2
x
MyIdentical(x,y)
a <- "Hello world!"
b <- "Bye world!"
MyIdentical(a, b)
b <- "Hello world!"
MyIdentical(a, b)
b <- "NA"
MyIdentical(a, b)
x <- c(NA, 2, 3, 4, 5, 6, 7)
x
is.na(x)
x[is.na(x)] <- 0
x
x <- c(NA, NA, 3, 4, NA, NA, NA)
x
is.na(x)
x[is.na(x)] <- 0
x
x <- sample(20)
x
x
set.seed(1492)
x <- sample(20)
x
x[x %% 2 == 0] <- 0
x
x <- rnorm(100)
qqnorm(x,pch=16, cex=.5)
x<-rt(100,2)
x<-rt(1000,2)
hist(x)
hist(x,breaks=50)
qqnorm(x)
qqline(x)
x<-rt(1000,100)
qqnorm(x)
qqline(x)
floor(-4.6)
ceiling(-4.6)
month.days
month.name
months.Date()
month.days
Bday <- function(N,n){
p.exact <- prod((N-(0:(n-1)))/N)
p.Stirling <- exp((N-n+.5)*log(N/(N-n))-n)
out <- c(p.exact,p.Stirling)
names(out) <- c("exact p","Stirling p")
out
}
Bday2 <- function(N,n) {}
Bday2 <- function(N,n) {
p.exact <- prod((N-(0:(n-1)))/N)
p.Stirling <- exp((N-n+.5)*log(N/(N-n))-n)
out <- c(p.exact,p.Stirling)
names(out) <- c("exact p","Stirling p")
}
Bday(365,20)
Bday2(365,20)
0%%2
5/10
q
q()
load("~/Documents/Spring 2016/STAT 302/HW 6/.RData")
ad.test(group.factor)
install.packages("nortest")
findFunction('ad.test')
ad.test(group.factor)
install.packages(c("cluster", "Matrix", "nlme", "survival"))
?ad.test
require(kSamples)
library(kSamples)
ad.test(group.factor)
ad.test(ReactionTimeList, method = "simulated", Nsim = 10000)
boxplot(Reaction~Station,data=dat1)
ad.test(ReactionTimeList$Station, method = "simulated", Nsim = 10000)
ReactionTimeList
group.factor
group2 <- paste(dat1[,2], dat1[,1], sep = ".")
group2.factor <- factor(group2)
group2.factor
plot(group2.factor)
dat1$Reaction~Station
plot(dat1$Reaction~Station)
plot(dat1$Reaction, dat1$Station)
plot(dat1$Station, dat1$Reaction)
plot(dat1$Reaction, dat1$Station)
plot(group2.factor)
set.seed(4711)
ad.test(group2.factor, method = "simulation", Nsim = 10000)
ad.test(group2, method = "simulation", Nsim = 10000)
gr2.unique <- sort(unique(group2.factor))
gr2.unique
ReactionTimeList2 <- vector("list", 12)
ReactionTimeList2
length(gr2.unique)
plot(dat1$Reaction, dat1$Station)
plot(group2.factor)
plot(dat1$Station, dat1$Reaction)
str(group2.factor)
dat1$Station
unique(dat1$Station)
group2.factor
ReactionTimeList2 <- vector("list", 3)
for (i in 1:length(unique(dat1$Station))) {
ReactionTimeList2[[i]] <- dat1[which(dat1$Station == ST6(2+i)),1]
}
for (i in 1:length(unique(dat1$Station))) {
ReactionTimeList2[[i]] <- dat1[which(dat1$Station == "ST6(2+i)"),1]
}
ReactionTimeList2
gr.unique
gr2.unique
group2 <- paste(dat1$Station)
group2.factor <- factor(group2)
group2.factor
gr2.unique <- sort(unique(group2.factor))
gr2.unique
dat1[which(group2.factor==gr2.unique[1]),1]
ReactionTimeList2
ReactionTimeList2 <- vector("list", 3)
ReactionTimeList2
for (i in 1:length(gr2.unique)) {
ReactionTimeList2[[i]] <- dat1[which(group2.factor==gr2.unique[i]),1]
}
ReactionTimeList2
ReactionTimeList[[1]]
length(ReactionTimeList2)
ReactionTimeList2[[3]]
ReactionTimeList2[[1]]
set.seed(4711)
ad.test(ReactionTimeList2, method = "simulated", Nsim = 10000)
plot(group2.factor)
plot(dat1$Station, dat1$Reaction)
plot(group2.factor)
plot(dat1$Reaction, dat1$Station)
plot(group2.factor)
plot(dat1$Station, dat1$Reaction)
install.packages("UsingR")
library(UsingR)
babies
wtreg <- lm(wt ~ gestation + ht + dwt, data = babies, subset = gestation < 999 & dwt < 999 & dwt < 999)
summary(wtreg)
qqnorm(wtreg$residuals)
qqline(wtreg$residuals)
fx1 <- function(N) {
x <- NULL
for (i in 1:N) {
x <- c(x, i)
}
x
}
fx2 <- function(N){
x <- numeric(N)
for (i in 1:N) {
x[i] <- i;
}
x
}
timing <- function(){
Nvec <- 1:5 * 1e4
t0vec<-NULL;
t1vec<-NULL;
t2vec<-NULL;
for(N in Nvec){
t0 <- system.time(1:N)[3]
t0vec <- c(t0vec, t0)
t1 <- system.time(fx1(N))[3]
t1vec <- c(t1vec, t1)
t2 <- system.time(fx2(N))[3]
t2vec <- c(t2vec, t2)
}
M <- cbind(Nvec, t0vec, t1vec, t2vec)
}
M<-timing()
Nvec
Nvec
M
t1vec
Nvec2 <- Nvec * Nvec
M.Nvec
timing()
M <- timing()
M
Nvec
system.time
M[1,]
M[,1]
M$Nvec
M[,2]
M[[2]]
M[,3]
M
M[,2]
M[,1]
Nvec2 <- M[,1] * M[,1]
Nvec2
quadlm <- lm(M[,3] ~ M[,1]+Nvec2)
x <- seq(0,50000,100)
y <- quadlm$coef[1]+quadlm$coef[2]*x+quadlm$coef[3]*xˆ2
y <- quadlm$coef[1]+quadlm$coef[2]*x+quadlm$coef[3]*(xˆ2)
y <- quadlm$coef[1]+quadlm$coef[2]*x+quadlm$coef[3]*(x*x)
lines(x,y,lty=2)
quadlm
plot(M[,3], M[,1])
plot(t=M[,3], N=M[,1])
plot(M[,3], M[,1], xlab = t, ylab = N)
plot(M[,3], M[,1], xlab = "t", ylab = "N")
lines(x,y,lty=2)
lines(x,y,lty=2)
plot(x, y, xlab = "t", ylab = "N")
lines(x,y,lty=2)
summary(quadlm)
fx <- function(x,y){x-y}
fx(c(3,5),1:3)
fx(c(3,5))
c(3,5)
rev(seq(1,5,.9))
which(6:1 > 5)
3^(1:3)-c(1,3,3)^(1:3)
plot (1:2 ,2:1 , xlab =" x " , ylab =" y " , pch =16)
lines (1:2 ,2:1)
getwd()
setwd("/Users/Jostein/Projects/datasciencecoursera/week2")
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
vales <- numeric()
for (i in id) {
data <- read.cvs(fileList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("specdata", "nitrates", 1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
vales <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("specdata", "nitrates", 1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("specdata", "nitrates", 1)
pollutantmean("specdata", "nitrates")
pollutantmean("/Users/Jostein/Projects/datasciencecoursera/week2/specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
vales <- c(values, data[[pollutant]])
print(values)
}
mean(values, na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
values <- c(values, data[[pollutant]])
print(values)
}
mean(values, na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
values <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 1:10)
getwd()
ls()
read.csv("specdata/001.csv")
data <- read.csv("specdata/001.csv")
head(data)
complete.cases(data)
sum(complete.cases(data))
filelist <- list.files(path="specdata", pattern=".csv")
length(filelist)
filelist <- list.files(path="specdata", pattern=".csv", full.names = TRUE)
filelist
sum(complete.cases(read.csv(filelist[1])))
sum <- sum(complete.cases(read.csv(filelist[1])))
sum
nobs <- numeric()
complete <- function(directory, id = 1:332) {
# 'directory' is a character vector of length 1
# indicating the location of the CSV files
# 'id' is an integer vector indicating the monitor
# ID numbers to be used
# Creates list of files to loop through
filelist <- list.files(path = directory, patter = '.CSV', full.names = TRUE)
nobs <- numeric()
for (i in id) {
data <- read.CSV(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))
}
}
complete(specdata, 1)
complete('specdata', 1)
complete <- function(directory, id = 1:332) {
# 'directory' is a character vector of length 1
# indicating the location of the CSV files
# 'id' is an integer vector indicating the monitor
# ID numbers to be used
# Creates list of files to loop through
filelist <- list.files(path = directory, patter = '.csv', full.names = TRUE)
nobs <- numeric()
for (i in id) {
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))
}
}
complete(specdata, 1)
complete("specdata/", 1)
complete <- function(directory, id = 1:332) {
# 'directory' is a character vector of length 1
# indicating the location of the CSV files
# 'id' is an integer vector indicating the monitor
# ID numbers to be used
# Creates list of files to loop through
filelist <- list.files(path = directory, patter = '.csv', full.names = TRUE)
nobs <- numeric()
for (i in id) {
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))
}
nobsDF <- data.frame(id, nobs)
nobsDF
}
complete("specdata/", 1)
corr2 <- function(directory, threshold = 0) {
corr <- numeric(0)
for (i in 1:332) {
data <- na.omit(read.csv(paste(directory, '/', sprintf("%03d", i), ".csv", sep="")))
if (nrow(data) >= threshold) {
cr <- cor(data["sulfate"], data["nitrate"])
if (!is.na(cr)) {
corr <- append(corr, cr)
}
}
}
corr
}
source("corr2.R")
source("complete.R")
cr <- corr("specdata", 150)
cr <- corr2("specdata", 150)
head(cr)
summary(cr)
cr <- corr2("specdata", 400)
head(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specata")
cr <- corr2("specata")
cr <- corr2("specata")
cr <- corr2("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr2("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
cr <- corr2("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- corr2("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(datasets)
data("iris")
?iris
data(iris)
?iris
library(datasets)
data(iris)
?iris
sapply(split(iris$Sepal.Length, iris$Species), mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
cylmpg <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
cylmpg
cylmpg[1]
abs(cylmpg[1]-cylmpg[3])
cylmpg[3]
abs(cylmpg[3]-cylmpg[1])
cylmpg[3]-cylmpg[1]
debug(ls)
ls
a <- matrix(2, 2)
a
a <- matrix(nrow = 2, ncol = 2)
a
!
source(cachematrix.R)
