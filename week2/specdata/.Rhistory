} else if(sum(is.na(x)==is.na(y)) == length(x)) {
x[which(is.na(x))] <- 0
y[which(is.na(y))] <- 0
x==y
} else {
is.na(x) == is.na(y)
}
}
myfun(x,y)
x
y
y[1] <- NA
y
x
myfun(x,y)
x
y
which(is.na(x))
y <- 1:7
y
which(is.na(y))
which(is.na(y))==which(is.na(x))
y
y[1] <- NA
if(which(is.na(x))==which(is.na(y))){return(foo)}
if(which(is.na(x))==which(is.na(y))){return(999)}
if(which(is.na(x))==which(is.na(y))){yes}
if(which(is.na(x))==which(is.na(y))){}
x
y
which(is.na(x))==which(is.na(y))
MyIdentical <- function(x,y){
if(all(!is.na(c(x,y)))){
if(sum(x==y)==length(x)){}
}
}
MyIdentical <- function(x,y){
if(all(!is.na(c(x,y)))){
if(sum(x==y)==length(x)){
return(TRUE)
}else{
return(FALSE)
}
}else if(which(is.na(x))==which(is.na(y))){
x[which(is.na(x))] <- 0
y[which(is.na(y))] <- 0
if(sum(x==y)==length(x)){
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
x
y
MyIdentical(x,y)
y[1] <- 1
MyIdentical(x,y)
MyIdentical <- function(x,y){
if(all(!is.na(c(x,y)))){
if(sum(x==y)==length(x)){
return(TRUE)
}else{
return(FALSE)
}
}else if((which(is.na(x))==which(is.na(y)))!=0){
x[which(is.na(x))] <- 0
y[which(is.na(y))] <- 0
if(sum(x==y)==length(x)){
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
MyIdentical(x,y)
MyIdentical <- function(x,y){
if(all(!is.na(c(x,y)))){
if(sum(x==y)==length(x)){
return(TRUE)
}else{
return(FALSE)
}
}else if(length(which(is.na(x))==which(is.na(y)))!=0){
x[which(is.na(x))] <- 0
y[which(is.na(y))] <- 0
if(sum(x==y)==length(x)){
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
MyIdentical(x,y)
x
y
x[1] <- 2
x
MyIdentical(x,y)
a <- "Hello world!"
b <- "Bye world!"
MyIdentical(a, b)
b <- "Hello world!"
MyIdentical(a, b)
b <- "NA"
MyIdentical(a, b)
x <- c(NA, 2, 3, 4, 5, 6, 7)
x
is.na(x)
x[is.na(x)] <- 0
x
x <- c(NA, NA, 3, 4, NA, NA, NA)
x
is.na(x)
x[is.na(x)] <- 0
x
x <- sample(20)
x
x
set.seed(1492)
x <- sample(20)
x
x[x %% 2 == 0] <- 0
x
x <- rnorm(100)
qqnorm(x,pch=16, cex=.5)
x<-rt(100,2)
x<-rt(1000,2)
hist(x)
hist(x,breaks=50)
qqnorm(x)
qqline(x)
x<-rt(1000,100)
qqnorm(x)
qqline(x)
floor(-4.6)
ceiling(-4.6)
month.days
month.name
months.Date()
month.days
Bday <- function(N,n){
p.exact <- prod((N-(0:(n-1)))/N)
p.Stirling <- exp((N-n+.5)*log(N/(N-n))-n)
out <- c(p.exact,p.Stirling)
names(out) <- c("exact p","Stirling p")
out
}
Bday2 <- function(N,n) {}
Bday2 <- function(N,n) {
p.exact <- prod((N-(0:(n-1)))/N)
p.Stirling <- exp((N-n+.5)*log(N/(N-n))-n)
out <- c(p.exact,p.Stirling)
names(out) <- c("exact p","Stirling p")
}
Bday(365,20)
Bday2(365,20)
0%%2
5/10
q
q()
load("~/Documents/Spring 2016/STAT 302/HW 6/.RData")
ad.test(group.factor)
install.packages("nortest")
findFunction('ad.test')
ad.test(group.factor)
install.packages(c("cluster", "Matrix", "nlme", "survival"))
?ad.test
require(kSamples)
library(kSamples)
ad.test(group.factor)
ad.test(ReactionTimeList, method = "simulated", Nsim = 10000)
boxplot(Reaction~Station,data=dat1)
ad.test(ReactionTimeList$Station, method = "simulated", Nsim = 10000)
ReactionTimeList
group.factor
group2 <- paste(dat1[,2], dat1[,1], sep = ".")
group2.factor <- factor(group2)
group2.factor
plot(group2.factor)
dat1$Reaction~Station
plot(dat1$Reaction~Station)
plot(dat1$Reaction, dat1$Station)
plot(dat1$Station, dat1$Reaction)
plot(dat1$Reaction, dat1$Station)
plot(group2.factor)
set.seed(4711)
ad.test(group2.factor, method = "simulation", Nsim = 10000)
ad.test(group2, method = "simulation", Nsim = 10000)
gr2.unique <- sort(unique(group2.factor))
gr2.unique
ReactionTimeList2 <- vector("list", 12)
ReactionTimeList2
length(gr2.unique)
plot(dat1$Reaction, dat1$Station)
plot(group2.factor)
plot(dat1$Station, dat1$Reaction)
str(group2.factor)
dat1$Station
unique(dat1$Station)
group2.factor
ReactionTimeList2 <- vector("list", 3)
for (i in 1:length(unique(dat1$Station))) {
ReactionTimeList2[[i]] <- dat1[which(dat1$Station == ST6(2+i)),1]
}
for (i in 1:length(unique(dat1$Station))) {
ReactionTimeList2[[i]] <- dat1[which(dat1$Station == "ST6(2+i)"),1]
}
ReactionTimeList2
gr.unique
gr2.unique
group2 <- paste(dat1$Station)
group2.factor <- factor(group2)
group2.factor
gr2.unique <- sort(unique(group2.factor))
gr2.unique
dat1[which(group2.factor==gr2.unique[1]),1]
ReactionTimeList2
ReactionTimeList2 <- vector("list", 3)
ReactionTimeList2
for (i in 1:length(gr2.unique)) {
ReactionTimeList2[[i]] <- dat1[which(group2.factor==gr2.unique[i]),1]
}
ReactionTimeList2
ReactionTimeList[[1]]
length(ReactionTimeList2)
ReactionTimeList2[[3]]
ReactionTimeList2[[1]]
set.seed(4711)
ad.test(ReactionTimeList2, method = "simulated", Nsim = 10000)
plot(group2.factor)
plot(dat1$Station, dat1$Reaction)
plot(group2.factor)
plot(dat1$Reaction, dat1$Station)
plot(group2.factor)
plot(dat1$Station, dat1$Reaction)
install.packages("UsingR")
library(UsingR)
babies
wtreg <- lm(wt ~ gestation + ht + dwt, data = babies, subset = gestation < 999 & dwt < 999 & dwt < 999)
summary(wtreg)
qqnorm(wtreg$residuals)
qqline(wtreg$residuals)
fx1 <- function(N) {
x <- NULL
for (i in 1:N) {
x <- c(x, i)
}
x
}
fx2 <- function(N){
x <- numeric(N)
for (i in 1:N) {
x[i] <- i;
}
x
}
timing <- function(){
Nvec <- 1:5 * 1e4
t0vec<-NULL;
t1vec<-NULL;
t2vec<-NULL;
for(N in Nvec){
t0 <- system.time(1:N)[3]
t0vec <- c(t0vec, t0)
t1 <- system.time(fx1(N))[3]
t1vec <- c(t1vec, t1)
t2 <- system.time(fx2(N))[3]
t2vec <- c(t2vec, t2)
}
M <- cbind(Nvec, t0vec, t1vec, t2vec)
}
M<-timing()
Nvec
Nvec
M
t1vec
Nvec2 <- Nvec * Nvec
M.Nvec
timing()
M <- timing()
M
Nvec
system.time
M[1,]
M[,1]
M$Nvec
M[,2]
M[[2]]
M[,3]
M
M[,2]
M[,1]
Nvec2 <- M[,1] * M[,1]
Nvec2
quadlm <- lm(M[,3] ~ M[,1]+Nvec2)
x <- seq(0,50000,100)
y <- quadlm$coef[1]+quadlm$coef[2]*x+quadlm$coef[3]*xˆ2
y <- quadlm$coef[1]+quadlm$coef[2]*x+quadlm$coef[3]*(xˆ2)
y <- quadlm$coef[1]+quadlm$coef[2]*x+quadlm$coef[3]*(x*x)
lines(x,y,lty=2)
quadlm
plot(M[,3], M[,1])
plot(t=M[,3], N=M[,1])
plot(M[,3], M[,1], xlab = t, ylab = N)
plot(M[,3], M[,1], xlab = "t", ylab = "N")
lines(x,y,lty=2)
lines(x,y,lty=2)
plot(x, y, xlab = "t", ylab = "N")
lines(x,y,lty=2)
summary(quadlm)
fx <- function(x,y){x-y}
fx(c(3,5),1:3)
fx(c(3,5))
c(3,5)
rev(seq(1,5,.9))
which(6:1 > 5)
3^(1:3)-c(1,3,3)^(1:3)
plot (1:2 ,2:1 , xlab =" x " , ylab =" y " , pch =16)
lines (1:2 ,2:1)
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
load
print(hw1_data)
print(hw1_data)[2]
print(hw1_data)[,2]
print(hw1_data)[2,]
print(hw1_data)[3,]
head(hw1_data, 2)
print(hw1_data)
head(hw1_data, 47:47)
print(hw1_data[,1])
head(hw1_data[,1])
print(hw1_data[1,])
print(hw1_data[,1] == NA)
print(hw1_data[,1])
sum(is.na(hw1_data$Ozone))
mean(hw1_data,na.rm = TRUE)
mean(hw1_data,na.rm=TRUE)
mean(hw1_data$Ozone,na.rm=TRUE)
newdata <- hw1_data$Ozone[x>31]
print(newdata)
head(newdata)
newdata
hw1_data
solar <- subset(hw1_data, Temp>90 & Ozone>31, select=Solar.R)
apply(solar,2,mean)
print(solar)
temp <- subset(hw1_data, Month=6)
temp
temp <- subset(hw1_data, Month=6, select = temp)
temp <- subset(hw1_data, Month=6, select=Temp)
temp
apply(temp,2,mean)
temp <- subset(hw1_data, Month==6, select=Temp)
apply(temp,2,mean)
ozone <- subset(hw1_data, Month==5, select=Ozone)
max(ozone)
max(ozone,na.rm = TRUE)
temp
x <- C(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
x
x[x<6] == 0
x
x[x<6] <-0
x
cube <- function(x, n){}
cube <- function(x, n){x^3}
cube(3)
x <- 1:10
if(x>5){x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<- 10
f(3)
x<-5
y<-if(x<3){NA} else {10}
y
clear
ls
rm(list = ls())
data <- read.csv(~/Projects/datasciencecoursera/week2/specdata, header = TRUE)
data <- read.csv('~/Projects/datasciencecoursera/week2/specdata', header = TRUE)
data <- read.csv(file = '~/Projects/datasciencecoursera/week2/specdata', header = TRUE)
data <- read.csv(file = '~/Projects/datasciencecoursera/week2/specdata.csv', header = TRUE)
setwd(~/Projects/datasciencecoursera/week2/specdata)
setwd('~/Projects/datasciencecoursera/week2/specdata')
pollutantmean <- function(directory, pollutant = 'nitrate', id = 1:332)
d
View(pollutantmean)
pollutantmean <- function(directory, pollutant = 'nitrate', id = 1:332)
View(pollutantmean)
rm(list = ls())
pollutantmean("specdata", "nitrate", 23)
}
pollutantmean("specdata", "nitrate", 23)
#pollutantmean("specdata", "nitrate", 23)
setwd(~/Projects/datasciencecoursera/week2/specdata)
# Returns the weighted mean of the pollutant across all monitors list in
# the 'id' vector (ignoring NA values), without rounding.
#
# 'directory' is a character vector of length 1 indicating the location of the CSV files
#
# 'pollutant' is a character vector of length 1 indicating the name
# of the pollutant for which we will calculate the mean; either "sulfate" or "nitrate"
#
# 'id' is the integer vector indicating the monitor ID numbers to be used.
pollutantmean <- function(directory, pollutant, id = 1:332) {
mean <- c()
mean <- c()
mean <- c()
mean <- c()
source('~/Projects/datasciencecoursera/week2/specdata/pollutantmean.R')
pollutantmean("specdata", "nitrate", 23)
mean <- c()
files <- as.character(list.files(directory))
print(pollutantmean('specdata', 'nitrate', 23))
setwd(Projects/datasciencecoursera/week2/specdata)
setwd(~/Projects/datasciencecoursera/week2/specdata)
setwd(Users/Jostein/Projects/datasciencecoursera/week2/specdata)
setwd(/Users/Jostein/Projects/datasciencecoursera/week2/specdata)
setwd("/Users/Jostein/Projects/datasciencecoursera/week2/specdata")
setwd("/Users/Jostein/Projects/datasciencecoursera/week2/specdata")
# Returns the weighted mean of the pollutant across all monitors list in
# the 'id' vector (ignoring NA values), without rounding.
setwd("/Users/Jostein/Projects/datasciencecoursera/week2/specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata")
}
mean <- c()
files <- as.character(list.files(directory))
paths <- paste(directory, files, sep = "")
for (i in id) {
curr <- read.csv(paths[i], header = TRUE, sep = "")
head(curr)
removeNA <- curr[!is.na(curr[, pollutant]), pollutant]
mean <- c(mean, removeNA)
}
result <- mean(mean)
print(result)
return(result)
}
pollutantmean("specdata", "nitrate", 23)
data <- read.csv("001.csv", header = TRUE)
data
head(data)
mean <- mean(data[["sulfate"]], na.rm = TRUE)
mean
View(pollutantmean)
pollutantmean <- function(directory, pollutant, id = 1:332) {}
pollutantmean <- function(directory, pollutant, id = 1:332) {}
pollutantmean <- function(directory, pollutant, id = 1:332) {}
pollutantmean <- function(directory, pollutant, id = 1:332) {}
View(pollutantmean)
pollutantmean <- function(directory, pollutant, id = 1:332) {}
pollutantmean <- function(directory, pollutant, id = 1:332) {fileList <- list.files(path = directory, pattern = ".csv")}
View(pollutantmean)
clear console
clear(console)
rm(list = ls())
pwd
getwd
getwd()
setwd("/Users/Jostein/Projects/datasciencecoursera/week2/specdata")
pollutantmean("users/Jostein/Projects/datasciencecoursera/week2/specdata", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
vales <- numeric()
for (i in id) {
data <- read.cvs(filesList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("users/Jostein/Projects/datasciencecoursera/week2/specdata", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
vales <- numeric()
for (i in id) {
data <- read.csv(filesList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("users/Jostein/Projects/datasciencecoursera/week2/specdata", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
fileList <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
vales <- numeric()
for (i in id) {
data <- read.csv(fileList[i])
vales <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("users/Jostein/Projects/datasciencecoursera/week2/specdata", "sulfate")
setwd("users/Jostein/Projects/datasciencecoursera/week2/specdata")
pollutantmean("specdata", "sulfate", 1)
setwd("C:/Users/Jostein/Projects/datasciencecoursera/week2/specdata")
setwd("C:/Users/Jostein/Projects/datasciencecoursera/week2/")
