data.frame(hospital=resultsUnlist, state=names(results), row.names=names(resultsUnlist[1]))
data.frame(hospital=resultsUnlist, state=names(results), row.names=names(resultsUnlist))
data.frame(hospital=resultsUnlist, state=names(results), row.names=names(results))
results
data.frame(hospital=resultsUnlist, state=names(results), row.names=results[,2]
data.frame(hospital=resultsUnlist, state=names(results), row.names=results[,2])
data.frame(hospital=resultsUnlist, state=names(results), row.names=names(resultsUnlist))
data.frame(hospital=resultsUnlist, state=names(results), row.names=names(df$state))
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
data <- data[,c(2, 7, 11, 17, 23)]
names(data) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
outcomes <- c("heart attack"=3, "heart failure"=4, "pneumonia"=5)
if (!outcome %in% names(data)) {
stop('invalid outcome')
}
if (num != "best" & num != "worst" & !is.numeric(num)) {
stop('invalid rank')
}
df <- data[, c(1, 2, outcomes[outcome])]
#df <- na.omit(df)
names(df) <- c("hospital", "state", "deaths")
dfOrder <- df[order(df$state, df$deaths),]
dfSplit <- split(dfOrder, dfOrder$state)
if (num == "best") {
num <- 1
} else if (num == "worst") {
num <- as.numeric(nrow(df))
}
results <- lapply(dfSplit, function(dfSplit) dfSplit[num,])
resultsUnlist <- unlist(results)
return(data.frame(hospital=resultsUnlist, state=names(results), row.names=names(resultsUnlist)))
}
rankall("heart attack", 20)
head(rankall("heart attack", 20),10)
rankhospital <- function(state, outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
data <- data[,c(2, 7, 11, 17, 23)]
names(data) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
outcomes <- c("heart attack"=3, "heart failure"=4, "pneumonia"=5)
if (!state %in% data$state) {
stop('invalid state')
}
if (!outcome %in% names(data)) {
stop('invalid outcome')
}
if (num != "best" & num != "worst" & !is.numeric(num)) {
stop('invalid rank')
}
df <- data[data$state == state, c(1, outcomes[outcome])]
names(df) <- c("name", "deaths")
df <- na.omit(df)
nums <- c("best" = 1, "worst" = nrow(df))
if (num == "best") {
num <- 1
}
else if (num == "worst") {
num <- as.numeric(nrow(df))
}
else if (num > nrow(df)) {
return(NA)
}
return(df[order(df$deaths, df$name), 1][num])
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
rankall("heart failure", 10)
head(rankall("heart attack", 20),10)
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the lowest 30-day death rate
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- as.data.frame(cbind(data[,2],
data[,7],
data[,11],
data[,17],
data[,23]), stringAsFactors = FALSE)
colnames(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
if (!state %in% df[,"state"]) {
stop('invalid state')
}
else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
else {
states <- which(df[,"state"] == state)
statesData <- df[states,]
outcomes <- as.numeric(statesData[, eval(outcome)])
minVal <- min(outcomes, na.rm = TRUE)
result <- statesData[, "hospital"][which(outcomes == minVal)]
outcome <- as.character(sort(result))
}
return(outcome)
}
best("SC", "heart attack")
best("SC", "heart attack")
best("NY", "pneumonia")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", stringAsFactors=FALSE)
data <- read.csv("outcome-of-care-measures.csv", stringAsFactors=FALSE)
data <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
View(data)
df <- data[,c(2, 7, 11, 17, 23)]
View(df)
names(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
View(df)
df <- na.omit(df)
View(df)
df <- data[data$state == state, c(1, outcomes[outcome])]
state <- "TX"
df <- data[data$state == state, c(1, outcomes[outcome])]
View(df)
df <- data[,c(2, 7, 11, 17, 23)]
View(df)
names(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
View(df)
df <- na.omit(df)
View(df)
df <- df[df$state == state, c(1, outcomes[outcome])]
View(df)
df <- df[order(df$outcome)]
names(df) <- c("hospital", "deaths")
df <- df[order(df$deaths)]
View(df)
df <- df[order(df$deaths),]
View(df)
head(df)
head(df, 10)
head(df, 1)
df[1]
df[1,]
y <- df[1,]
y
y$hospital
df[1,]$hospital
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the lowest 30-day death rate
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", stringAsFactors=FALSE)
#	df <- as.data.frame(cbind(data[,2],
#								data[,7],
#								data[,11],
#								data[,17],
#								data[,23]), stringAsFactors = FALSE)
df <- data[,c(2, 7, 11, 17, 23)]
#	colnames(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
outcomes <- c("heart attack"=3, "heart failure"=4, "pneumonia"=5)
names(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
if (!state %in% df[,"state"]) {
stop('invalid state')
}
else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
df <- na.omit(df)
df <- df[df$state == state, c(1, outcomes[outcome])]
names(df) <- c("hospital", "deaths")
df <- df[order(df$deaths)]
return(df[1,]$hospital)
#else {
#	states <- which(df[,"state"] == state)
#	statesData <- df[states,]
#	outcomes <- as.numeric(statesData[, eval(outcome)])
#	minVal <- min(outcomes, na.rm = TRUE)
#	result <- statesData[, "hospital"][which(outcomes == minVal)]
#	outcome <- as.character(sort(result))
#}
#return(outcome)
}
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the lowest 30-day death rate
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#	df <- as.data.frame(cbind(data[,2],
#								data[,7],
#								data[,11],
#								data[,17],
#								data[,23]), stringAsFactors = FALSE)
df <- data[,c(2, 7, 11, 17, 23)]
#	colnames(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
outcomes <- c("heart attack"=3, "heart failure"=4, "pneumonia"=5)
names(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
if (!state %in% df[,"state"]) {
stop('invalid state')
}
else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
df <- na.omit(df)
df <- df[df$state == state, c(1, outcomes[outcome])]
names(df) <- c("hospital", "deaths")
df <- df[order(df$deaths)]
return(df[1,]$hospital)
#else {
#	states <- which(df[,"state"] == state)
#	statesData <- df[states,]
#	outcomes <- as.numeric(statesData[, eval(outcome)])
#	minVal <- min(outcomes, na.rm = TRUE)
#	result <- statesData[, "hospital"][which(outcomes == minVal)]
#	outcome <- as.character(sort(result))
#}
#return(outcome)
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the lowest 30-day death rate
#data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", stringAsFactors = FALSE, )
data <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
#	df <- as.data.frame(cbind(data[,2],
#								data[,7],
#								data[,11],
#								data[,17],
#								data[,23]), stringAsFactors = FALSE)
df <- data[,c(2, 7, 11, 17, 23)]
#	colnames(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
outcomes <- c("heart attack"=3, "heart failure"=4, "pneumonia"=5)
names(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
if (!state %in% df[,"state"]) {
stop('invalid state')
}
else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
df <- na.omit(df)
df <- df[df$state == state, c(1, outcomes[outcome])]
names(df) <- c("hospital", "deaths")
df <- df[order(df$deaths)]
return(df[1,]$hospital)
#else {
#	states <- which(df[,"state"] == state)
#	statesData <- df[states,]
#	outcomes <- as.numeric(statesData[, eval(outcome)])
#	minVal <- min(outcomes, na.rm = TRUE)
#	result <- statesData[, "hospital"][which(outcomes == minVal)]
#	outcome <- as.character(sort(result))
#}
#return(outcome)
}
best("TX", "heart attack")
View(df)
df <- df[order(df$deaths)]
df <- df[order(df$deaths),]
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the lowest 30-day death rate
#data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", stringAsFactors = FALSE, )
data <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
#	df <- as.data.frame(cbind(data[,2],
#								data[,7],
#								data[,11],
#								data[,17],
#								data[,23]), stringAsFactors = FALSE)
df <- data[,c(2, 7, 11, 17, 23)]
#	colnames(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
outcomes <- c("heart attack"=3, "heart failure"=4, "pneumonia"=5)
names(df) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
if (!state %in% df[,"state"]) {
stop('invalid state')
}
else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
df <- na.omit(df)
df <- df[df$state == state, c(1, outcomes[outcome])]
names(df) <- c("hospital", "deaths")
df <- df[order(df$deaths),]
return(df[1,]$hospital)
#else {
#	states <- which(df[,"state"] == state)
#	statesData <- df[states,]
#	outcomes <- as.numeric(statesData[, eval(outcome)])
#	minVal <- min(outcomes, na.rm = TRUE)
#	result <- statesData[, "hospital"][which(outcomes == minVal)]
#	outcome <- as.character(sort(result))
#}
#return(outcome)
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
rankhospital <- function(state, outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
data <- data[,c(2, 7, 11, 17, 23)]
names(data) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
outcomes <- c("heart attack"=3, "heart failure"=4, "pneumonia"=5)
if (!state %in% data$state) {
stop('invalid state')
}
if (!outcome %in% names(data)) {
stop('invalid outcome')
}
if (num != "best" & num != "worst" & !is.numeric(num)) {
stop('invalid rank')
}
df <- data[data$state == state, c(1, outcomes[outcome])]
names(df) <- c("name", "deaths")
df <- na.omit(df)
nums <- c("best" = 1, "worst" = nrow(df))
if (num == "best") {
num <- 1
}
else if (num == "worst") {
num <- as.numeric(nrow(df))
}
else if (num > nrow(df)) {
return(NA)
}
return(df[order(df$deaths, df$name), 1][num])
}
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
View(data)
df <- data[, c(1, 2, outcomes[outcome])]
View(df)
data <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
data <- data[,c(2, 7, 11, 17, 23)]
names(data) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
View(data)
df <- data[, c(1, 2, outcomes[outcome])]
View(df)
df <- na.omit(df)
View(df)
names(df) <- c("hospital", "state", "deaths")
dfOrder <- df[order(df$state, df$deaths, df$hospital),]
names(df) <- c("hospital", "state", "deaths")
View(df)
df <- data[, c(1, 2, outcomes[outcome])]
df <- na.omit(df)
View(df)
dfSplit <- split(df, df$state)
View(dfSplit)
dfSplit
dfSplit <- dfSplit[order(dfSplit$deaths, dfSplit$hospital)]
names(dfSplit) <- c("hospital", "state", "deaths")
View(dfSplit)
dfSplit
df
View(df)
names(df) <- c("hospital", "state", "deaths")
View(df)
dfSplit <- split(df, df$state)
dfSplit <- dfSplit[order(dfSplit$deaths, dfSplit$hospital)]
dfSplit <- dfSplit[order(dfSplit$deaths, dfSplit$hospital),]
head(dfSplit)
names(dfSplit)
rankall <- function(outcome, num = "best") {
## Read outcome data
x <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
colNum <- c('heart attack'=11, 'heart failure'=17, 'pneumonia'=23)[outcome]
if (is.na(colNum)) {
stop('invalid outcome')
}
x[, colNum] <- suppressWarnings(as.numeric(x[, colNum]))
nameCol <- 2
## For each state, find the hospital of the given rank
hospitalList <- lapply (split(x, x$State), function(x){
unordered <- x[!is.na(x[colNum]),] # unordered can have no rows
ordered <- unordered[order(unordered[colNum],unordered[nameCol]),]
position <- c('best'=1, 'worst'= nrow(unordered))[num]
if (is.na(position)) {position <- num}
ordered[position, nameCol]
}
)
## Return a data frame with the hospital names and the
## (abbreviated) state name
data.frame(hospital=unlist(hospitalList), state=names(hospitalList))
}
head(test("heart attack", 20), 10)
source("test.r")
head(test("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
x <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
colNum <- c('heart attack'=11, 'heart failure'=17, 'pneumonia'=23)[outcome]
if (is.na(colNum)) {
stop('invalid outcome')
}
x[, colNum] <- suppressWarnings(as.numeric(x[, colNum]))
nameCol <- 2
## For each state, find the hospital of the given rank
hospitalList <- lapply (split(x, x$State), function(x){
unordered <- x[!is.na(x[colNum]),] # unordered can have no rows
ordered <- unordered[order(unordered[colNum],unordered[nameCol]),]
position <- c('best'=1, 'worst'= nrow(unordered))[num]
if (is.na(position)) {position <- num}
ordered[position, nameCol]
}
)
## Return a data frame with the hospital names and the
## (abbreviated) state name
data.frame(hospital=unlist(hospitalList), state=names(hospitalList))
}
head(test("heart attack", 20), 10)
source("rankall2.R")
View(best)
rankall2 <- function(outcome, num = "best") {
## Read outcome data
x <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
colNum <- c('heart attack'=11, 'heart failure'=17, 'pneumonia'=23)[outcome]
if (is.na(colNum)) {
stop('invalid outcome')
}
x[, colNum] <- suppressWarnings(as.numeric(x[, colNum]))
nameCol <- 2
## For each state, find the hospital of the given rank
hospitalList <- lapply (split(x, x$State), function(x){
unordered <- x[!is.na(x[colNum]),] # unordered can have no rows
ordered <- unordered[order(unordered[colNum],unordered[nameCol]),]
position <- c('best'=1, 'worst'= nrow(unordered))[num]
if (is.na(position)) {position <- num}
ordered[position, nameCol]
}
)
## Return a data frame with the hospital names and the
## (abbreviated) state name
data.frame(hospital=unlist(hospitalList), state=names(hospitalList))
}
source("rankall2.R")
head(rankall2("heart attack", 20), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
install_from_swirl("Getting and Cleaning Data")
swirl()
data <- download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
getwd()
setwd()
setwd("/Users/Jostein/Projects/datasciencecoursera/")
getwd()
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",  "/Users/Jostein/Projects/datasciencecoursera/, "curl")
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "/Users/Jostein/Projects/datasciencecoursera/", "curl")
View(data)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "/Users/Jostein/Projects/datasciencecoursera/", "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "/Users/Jostein/Projects/datasciencecoursera/")
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- read.csv(fileUrl)
View(data)
df <- data[data$VAL==24]
df <- data[data$VAL==24,]
View(df)
df <- na.omit(df)
View(df)
df <- data[data$VAL==24,]
View(df)
df <- data[,data$VAL==24]
df <- data[data$VAL==24]
which(data[data$VAL==24])
which(data[data$VAL==24,])
data[data$VAL==24]
data[data$VAL==24,]
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
library(xlsx)
install.packages("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
ngapData <- read.xlsx("./data/ngap.xlsx", header = TRUE, colIndex = 18:23, rowIndex = 7:15)
library(xlsx)
library(xlsx)
install.packages("rJava", type='source')
install.packages("rJava", type = "source")
ngapData <- read.xlsx(fileUrl, "./data/ngap.xlsx", header = TRUE, colIndex = 18:23, rowIndex = 7:15)
library(xlsx)
which(java)
library(rJava)
library(rJava)
library(rJava)
install.packages(rJava)
install.packages(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
